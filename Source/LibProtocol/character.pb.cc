// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: character.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "character.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* CounterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyCounters_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyCounters_reflection_ = NULL;
const ::google::protobuf::Descriptor* UniqueIDItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UniqueIDItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MyUniqueID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyUniqueID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Relation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Relation_reflection_ = NULL;
const ::google::protobuf::Descriptor* UserBinary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UserBinary_reflection_ = NULL;
const ::google::protobuf::Descriptor* WsUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WsUser_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_character_2eproto() {
  protobuf_AddDesc_character_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "character.proto");
  GOOGLE_CHECK(file != NULL);
  CounterInfo_descriptor_ = file->message_type(0);
  static const int CounterInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterInfo, itemval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterInfo, endtime_),
  };
  CounterInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CounterInfo_descriptor_,
      CounterInfo::default_instance_,
      CounterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CounterInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterInfo, _internal_metadata_),
      -1);
  MyCounters_descriptor_ = file->message_type(1);
  static const int MyCounters_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCounters, counters_),
  };
  MyCounters_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyCounters_descriptor_,
      MyCounters::default_instance_,
      MyCounters_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCounters, _has_bits_[0]),
      -1,
      -1,
      sizeof(MyCounters),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyCounters, _internal_metadata_),
      -1);
  UniqueIDItem_descriptor_ = file->message_type(2);
  static const int UniqueIDItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, startid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, endid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, steplenght_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, startcount_),
  };
  UniqueIDItem_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UniqueIDItem_descriptor_,
      UniqueIDItem::default_instance_,
      UniqueIDItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, _has_bits_[0]),
      -1,
      -1,
      sizeof(UniqueIDItem),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UniqueIDItem, _internal_metadata_),
      -1);
  MyUniqueID_descriptor_ = file->message_type(3);
  static const int MyUniqueID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyUniqueID, uuids_),
  };
  MyUniqueID_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyUniqueID_descriptor_,
      MyUniqueID::default_instance_,
      MyUniqueID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyUniqueID, _has_bits_[0]),
      -1,
      -1,
      sizeof(MyUniqueID),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyUniqueID, _internal_metadata_),
      -1);
  RelInfo_descriptor_ = file->message_type(4);
  static const int RelInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelInfo, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelInfo, rel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelInfo, dealreltime_),
  };
  RelInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RelInfo_descriptor_,
      RelInfo::default_instance_,
      RelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(RelInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelInfo, _internal_metadata_),
      -1);
  Relation_descriptor_ = file->message_type(5);
  static const int Relation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, rels_),
  };
  Relation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Relation_descriptor_,
      Relation::default_instance_,
      Relation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _has_bits_[0]),
      -1,
      -1,
      sizeof(Relation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Relation, _internal_metadata_),
      -1);
  UserBinary_descriptor_ = file->message_type(6);
  static const int UserBinary_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, counters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, uniqueid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, relation_),
  };
  UserBinary_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      UserBinary_descriptor_,
      UserBinary::default_instance_,
      UserBinary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, _has_bits_[0]),
      -1,
      -1,
      sizeof(UserBinary),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UserBinary, _internal_metadata_),
      -1);
  WsUser_descriptor_ = file->message_type(7);
  static const int WsUser_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, char_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, account_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, level_),
  };
  WsUser_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WsUser_descriptor_,
      WsUser::default_instance_,
      WsUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, _has_bits_[0]),
      -1,
      -1,
      sizeof(WsUser),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WsUser, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_character_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CounterInfo_descriptor_, &CounterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyCounters_descriptor_, &MyCounters::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UniqueIDItem_descriptor_, &UniqueIDItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyUniqueID_descriptor_, &MyUniqueID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RelInfo_descriptor_, &RelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Relation_descriptor_, &Relation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      UserBinary_descriptor_, &UserBinary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WsUser_descriptor_, &WsUser::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_character_2eproto() {
  delete CounterInfo::default_instance_;
  delete CounterInfo_reflection_;
  delete MyCounters::default_instance_;
  delete MyCounters_reflection_;
  delete UniqueIDItem::default_instance_;
  delete UniqueIDItem_reflection_;
  delete MyUniqueID::default_instance_;
  delete MyUniqueID_reflection_;
  delete RelInfo::default_instance_;
  delete RelInfo_reflection_;
  delete Relation::default_instance_;
  delete Relation_reflection_;
  delete UserBinary::default_instance_;
  delete UserBinary_reflection_;
  delete WsUser::default_instance_;
  delete WsUser_reflection_;
}

void protobuf_AddDesc_character_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017character.proto\022\010protobuf\"R\n\013CounterIn"
    "fo\022\016\n\006itemid\030\001 \001(\005\022\017\n\007itemval\030\002 \001(\005\022\021\n\ts"
    "tarttime\030\003 \001(\005\022\017\n\007endtime\030\004 \001(\005\"5\n\nMyCou"
    "nters\022\'\n\010counters\030\001 \003(\0132\025.protobuf.Count"
    "erInfo\"f\n\014UniqueIDItem\022\016\n\006itemid\030\001 \001(\005\022\017"
    "\n\007startid\030\002 \001(\005\022\r\n\005endid\030\003 \001(\005\022\022\n\nsteple"
    "nght\030\004 \001(\005\022\022\n\nstartcount\030\005 \001(\005\"3\n\nMyUniq"
    "ueID\022%\n\005uuids\030\001 \003(\0132\026.protobuf.UniqueIDI"
    "tem\"L\n\007RelInfo\022\013\n\003uid\030\001 \001(\003\022\013\n\003rel\030\002 \001(\005"
    "\022\022\n\ncreatetime\030\003 \001(\005\022\023\n\013dealreltime\030\004 \001("
    "\005\"+\n\010Relation\022\037\n\004rels\030c \003(\0132\021.protobuf.R"
    "elInfo\"\202\001\n\nUserBinary\022&\n\010counters\030\001 \001(\0132"
    "\024.protobuf.MyCounters\022&\n\010uniqueid\030\002 \001(\0132"
    "\024.protobuf.MyUniqueID\022$\n\010relation\030\003 \001(\0132"
    "\022.protobuf.Relation\"X\n\006WsUser\022\017\n\007char_id"
    "\030\001 \001(\003\022\022\n\naccount_id\030\002 \001(\003\022\014\n\004name\030\003 \001(\t"
    "\022\014\n\004type\030\004 \001(\005\022\r\n\005level\030\005 \001(\005", 669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "character.proto", &protobuf_RegisterTypes);
  CounterInfo::default_instance_ = new CounterInfo();
  MyCounters::default_instance_ = new MyCounters();
  UniqueIDItem::default_instance_ = new UniqueIDItem();
  MyUniqueID::default_instance_ = new MyUniqueID();
  RelInfo::default_instance_ = new RelInfo();
  Relation::default_instance_ = new Relation();
  UserBinary::default_instance_ = new UserBinary();
  WsUser::default_instance_ = new WsUser();
  CounterInfo::default_instance_->InitAsDefaultInstance();
  MyCounters::default_instance_->InitAsDefaultInstance();
  UniqueIDItem::default_instance_->InitAsDefaultInstance();
  MyUniqueID::default_instance_->InitAsDefaultInstance();
  RelInfo::default_instance_->InitAsDefaultInstance();
  Relation::default_instance_->InitAsDefaultInstance();
  UserBinary::default_instance_->InitAsDefaultInstance();
  WsUser::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_character_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_character_2eproto {
  StaticDescriptorInitializer_character_2eproto() {
    protobuf_AddDesc_character_2eproto();
  }
} static_descriptor_initializer_character_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CounterInfo::kItemidFieldNumber;
const int CounterInfo::kItemvalFieldNumber;
const int CounterInfo::kStarttimeFieldNumber;
const int CounterInfo::kEndtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CounterInfo::CounterInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.CounterInfo)
}

void CounterInfo::InitAsDefaultInstance() {
}

CounterInfo::CounterInfo(const CounterInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.CounterInfo)
}

void CounterInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemval_ = 0;
  starttime_ = 0;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterInfo::~CounterInfo() {
  // @@protoc_insertion_point(destructor:protobuf.CounterInfo)
  SharedDtor();
}

void CounterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterInfo_descriptor_;
}

const CounterInfo& CounterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

CounterInfo* CounterInfo::default_instance_ = NULL;

CounterInfo* CounterInfo::New(::google::protobuf::Arena* arena) const {
  CounterInfo* n = new CounterInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CounterInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.CounterInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CounterInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CounterInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(itemid_, endtime_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CounterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.CounterInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_itemval;
        break;
      }

      // optional int32 itemval = 2;
      case 2: {
        if (tag == 16) {
         parse_itemval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemval_)));
          set_has_itemval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // optional int32 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // optional int32 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.CounterInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.CounterInfo)
  return false;
#undef DO_
}

void CounterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.CounterInfo)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemval = 2;
  if (has_itemval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemval(), output);
  }

  // optional int32 starttime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->starttime(), output);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endtime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.CounterInfo)
}

::google::protobuf::uint8* CounterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.CounterInfo)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 itemval = 2;
  if (has_itemval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemval(), target);
  }

  // optional int32 starttime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->starttime(), target);
  }

  // optional int32 endtime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endtime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.CounterInfo)
  return target;
}

int CounterInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.CounterInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemval = 2;
    if (has_itemval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemval());
    }

    // optional int32 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starttime());
    }

    // optional int32 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.CounterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CounterInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CounterInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.CounterInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.CounterInfo)
    MergeFrom(*source);
  }
}

void CounterInfo::MergeFrom(const CounterInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.CounterInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemval()) {
      set_itemval(from.itemval());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CounterInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.CounterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterInfo::CopyFrom(const CounterInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.CounterInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterInfo::IsInitialized() const {

  return true;
}

void CounterInfo::Swap(CounterInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CounterInfo::InternalSwap(CounterInfo* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(itemval_, other->itemval_);
  std::swap(starttime_, other->starttime_);
  std::swap(endtime_, other->endtime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CounterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterInfo_descriptor_;
  metadata.reflection = CounterInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CounterInfo

// optional int32 itemid = 1;
bool CounterInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CounterInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void CounterInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void CounterInfo::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 CounterInfo::itemid() const {
  // @@protoc_insertion_point(field_get:protobuf.CounterInfo.itemid)
  return itemid_;
}
 void CounterInfo::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.CounterInfo.itemid)
}

// optional int32 itemval = 2;
bool CounterInfo::has_itemval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CounterInfo::set_has_itemval() {
  _has_bits_[0] |= 0x00000002u;
}
void CounterInfo::clear_has_itemval() {
  _has_bits_[0] &= ~0x00000002u;
}
void CounterInfo::clear_itemval() {
  itemval_ = 0;
  clear_has_itemval();
}
 ::google::protobuf::int32 CounterInfo::itemval() const {
  // @@protoc_insertion_point(field_get:protobuf.CounterInfo.itemval)
  return itemval_;
}
 void CounterInfo::set_itemval(::google::protobuf::int32 value) {
  set_has_itemval();
  itemval_ = value;
  // @@protoc_insertion_point(field_set:protobuf.CounterInfo.itemval)
}

// optional int32 starttime = 3;
bool CounterInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CounterInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
void CounterInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
void CounterInfo::clear_starttime() {
  starttime_ = 0;
  clear_has_starttime();
}
 ::google::protobuf::int32 CounterInfo::starttime() const {
  // @@protoc_insertion_point(field_get:protobuf.CounterInfo.starttime)
  return starttime_;
}
 void CounterInfo::set_starttime(::google::protobuf::int32 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.CounterInfo.starttime)
}

// optional int32 endtime = 4;
bool CounterInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CounterInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
void CounterInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
void CounterInfo::clear_endtime() {
  endtime_ = 0;
  clear_has_endtime();
}
 ::google::protobuf::int32 CounterInfo::endtime() const {
  // @@protoc_insertion_point(field_get:protobuf.CounterInfo.endtime)
  return endtime_;
}
 void CounterInfo::set_endtime(::google::protobuf::int32 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.CounterInfo.endtime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyCounters::kCountersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyCounters::MyCounters()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.MyCounters)
}

void MyCounters::InitAsDefaultInstance() {
}

MyCounters::MyCounters(const MyCounters& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.MyCounters)
}

void MyCounters::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyCounters::~MyCounters() {
  // @@protoc_insertion_point(destructor:protobuf.MyCounters)
  SharedDtor();
}

void MyCounters::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyCounters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyCounters::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyCounters_descriptor_;
}

const MyCounters& MyCounters::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

MyCounters* MyCounters::default_instance_ = NULL;

MyCounters* MyCounters::New(::google::protobuf::Arena* arena) const {
  MyCounters* n = new MyCounters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyCounters::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MyCounters)
  counters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MyCounters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.MyCounters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.CounterInfo counters = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_counters:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_counters;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.MyCounters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.MyCounters)
  return false;
#undef DO_
}

void MyCounters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.MyCounters)
  // repeated .protobuf.CounterInfo counters = 1;
  for (unsigned int i = 0, n = this->counters_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counters(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.MyCounters)
}

::google::protobuf::uint8* MyCounters::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MyCounters)
  // repeated .protobuf.CounterInfo counters = 1;
  for (unsigned int i = 0, n = this->counters_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counters(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MyCounters)
  return target;
}

int MyCounters::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MyCounters)
  int total_size = 0;

  // repeated .protobuf.CounterInfo counters = 1;
  total_size += 1 * this->counters_size();
  for (int i = 0; i < this->counters_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counters(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyCounters::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.MyCounters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyCounters* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyCounters>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.MyCounters)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.MyCounters)
    MergeFrom(*source);
  }
}

void MyCounters::MergeFrom(const MyCounters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MyCounters)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  counters_.MergeFrom(from.counters_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MyCounters::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.MyCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyCounters::CopyFrom(const MyCounters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MyCounters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyCounters::IsInitialized() const {

  return true;
}

void MyCounters::Swap(MyCounters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyCounters::InternalSwap(MyCounters* other) {
  counters_.UnsafeArenaSwap(&other->counters_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyCounters::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyCounters_descriptor_;
  metadata.reflection = MyCounters_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyCounters

// repeated .protobuf.CounterInfo counters = 1;
int MyCounters::counters_size() const {
  return counters_.size();
}
void MyCounters::clear_counters() {
  counters_.Clear();
}
const ::protobuf::CounterInfo& MyCounters::counters(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.MyCounters.counters)
  return counters_.Get(index);
}
::protobuf::CounterInfo* MyCounters::mutable_counters(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.MyCounters.counters)
  return counters_.Mutable(index);
}
::protobuf::CounterInfo* MyCounters::add_counters() {
  // @@protoc_insertion_point(field_add:protobuf.MyCounters.counters)
  return counters_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::CounterInfo >*
MyCounters::mutable_counters() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.MyCounters.counters)
  return &counters_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::CounterInfo >&
MyCounters::counters() const {
  // @@protoc_insertion_point(field_list:protobuf.MyCounters.counters)
  return counters_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UniqueIDItem::kItemidFieldNumber;
const int UniqueIDItem::kStartidFieldNumber;
const int UniqueIDItem::kEndidFieldNumber;
const int UniqueIDItem::kSteplenghtFieldNumber;
const int UniqueIDItem::kStartcountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UniqueIDItem::UniqueIDItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.UniqueIDItem)
}

void UniqueIDItem::InitAsDefaultInstance() {
}

UniqueIDItem::UniqueIDItem(const UniqueIDItem& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.UniqueIDItem)
}

void UniqueIDItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  startid_ = 0;
  endid_ = 0;
  steplenght_ = 0;
  startcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UniqueIDItem::~UniqueIDItem() {
  // @@protoc_insertion_point(destructor:protobuf.UniqueIDItem)
  SharedDtor();
}

void UniqueIDItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UniqueIDItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UniqueIDItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UniqueIDItem_descriptor_;
}

const UniqueIDItem& UniqueIDItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

UniqueIDItem* UniqueIDItem::default_instance_ = NULL;

UniqueIDItem* UniqueIDItem::New(::google::protobuf::Arena* arena) const {
  UniqueIDItem* n = new UniqueIDItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UniqueIDItem::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.UniqueIDItem)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(UniqueIDItem, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<UniqueIDItem*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(itemid_, startcount_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UniqueIDItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.UniqueIDItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startid;
        break;
      }

      // optional int32 startid = 2;
      case 2: {
        if (tag == 16) {
         parse_startid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startid_)));
          set_has_startid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endid;
        break;
      }

      // optional int32 endid = 3;
      case 3: {
        if (tag == 24) {
         parse_endid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endid_)));
          set_has_endid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_steplenght;
        break;
      }

      // optional int32 steplenght = 4;
      case 4: {
        if (tag == 32) {
         parse_steplenght:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steplenght_)));
          set_has_steplenght();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startcount;
        break;
      }

      // optional int32 startcount = 5;
      case 5: {
        if (tag == 40) {
         parse_startcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startcount_)));
          set_has_startcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.UniqueIDItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.UniqueIDItem)
  return false;
#undef DO_
}

void UniqueIDItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.UniqueIDItem)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 startid = 2;
  if (has_startid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startid(), output);
  }

  // optional int32 endid = 3;
  if (has_endid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endid(), output);
  }

  // optional int32 steplenght = 4;
  if (has_steplenght()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->steplenght(), output);
  }

  // optional int32 startcount = 5;
  if (has_startcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->startcount(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.UniqueIDItem)
}

::google::protobuf::uint8* UniqueIDItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.UniqueIDItem)
  // optional int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 startid = 2;
  if (has_startid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startid(), target);
  }

  // optional int32 endid = 3;
  if (has_endid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endid(), target);
  }

  // optional int32 steplenght = 4;
  if (has_steplenght()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->steplenght(), target);
  }

  // optional int32 startcount = 5;
  if (has_startcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->startcount(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.UniqueIDItem)
  return target;
}

int UniqueIDItem::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.UniqueIDItem)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 startid = 2;
    if (has_startid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startid());
    }

    // optional int32 endid = 3;
    if (has_endid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endid());
    }

    // optional int32 steplenght = 4;
    if (has_steplenght()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steplenght());
    }

    // optional int32 startcount = 5;
    if (has_startcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startcount());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UniqueIDItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.UniqueIDItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UniqueIDItem* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UniqueIDItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.UniqueIDItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.UniqueIDItem)
    MergeFrom(*source);
  }
}

void UniqueIDItem::MergeFrom(const UniqueIDItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.UniqueIDItem)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_startid()) {
      set_startid(from.startid());
    }
    if (from.has_endid()) {
      set_endid(from.endid());
    }
    if (from.has_steplenght()) {
      set_steplenght(from.steplenght());
    }
    if (from.has_startcount()) {
      set_startcount(from.startcount());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UniqueIDItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.UniqueIDItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UniqueIDItem::CopyFrom(const UniqueIDItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.UniqueIDItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UniqueIDItem::IsInitialized() const {

  return true;
}

void UniqueIDItem::Swap(UniqueIDItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UniqueIDItem::InternalSwap(UniqueIDItem* other) {
  std::swap(itemid_, other->itemid_);
  std::swap(startid_, other->startid_);
  std::swap(endid_, other->endid_);
  std::swap(steplenght_, other->steplenght_);
  std::swap(startcount_, other->startcount_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UniqueIDItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UniqueIDItem_descriptor_;
  metadata.reflection = UniqueIDItem_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UniqueIDItem

// optional int32 itemid = 1;
bool UniqueIDItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UniqueIDItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
void UniqueIDItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
void UniqueIDItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
 ::google::protobuf::int32 UniqueIDItem::itemid() const {
  // @@protoc_insertion_point(field_get:protobuf.UniqueIDItem.itemid)
  return itemid_;
}
 void UniqueIDItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.UniqueIDItem.itemid)
}

// optional int32 startid = 2;
bool UniqueIDItem::has_startid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UniqueIDItem::set_has_startid() {
  _has_bits_[0] |= 0x00000002u;
}
void UniqueIDItem::clear_has_startid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UniqueIDItem::clear_startid() {
  startid_ = 0;
  clear_has_startid();
}
 ::google::protobuf::int32 UniqueIDItem::startid() const {
  // @@protoc_insertion_point(field_get:protobuf.UniqueIDItem.startid)
  return startid_;
}
 void UniqueIDItem::set_startid(::google::protobuf::int32 value) {
  set_has_startid();
  startid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.UniqueIDItem.startid)
}

// optional int32 endid = 3;
bool UniqueIDItem::has_endid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UniqueIDItem::set_has_endid() {
  _has_bits_[0] |= 0x00000004u;
}
void UniqueIDItem::clear_has_endid() {
  _has_bits_[0] &= ~0x00000004u;
}
void UniqueIDItem::clear_endid() {
  endid_ = 0;
  clear_has_endid();
}
 ::google::protobuf::int32 UniqueIDItem::endid() const {
  // @@protoc_insertion_point(field_get:protobuf.UniqueIDItem.endid)
  return endid_;
}
 void UniqueIDItem::set_endid(::google::protobuf::int32 value) {
  set_has_endid();
  endid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.UniqueIDItem.endid)
}

// optional int32 steplenght = 4;
bool UniqueIDItem::has_steplenght() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void UniqueIDItem::set_has_steplenght() {
  _has_bits_[0] |= 0x00000008u;
}
void UniqueIDItem::clear_has_steplenght() {
  _has_bits_[0] &= ~0x00000008u;
}
void UniqueIDItem::clear_steplenght() {
  steplenght_ = 0;
  clear_has_steplenght();
}
 ::google::protobuf::int32 UniqueIDItem::steplenght() const {
  // @@protoc_insertion_point(field_get:protobuf.UniqueIDItem.steplenght)
  return steplenght_;
}
 void UniqueIDItem::set_steplenght(::google::protobuf::int32 value) {
  set_has_steplenght();
  steplenght_ = value;
  // @@protoc_insertion_point(field_set:protobuf.UniqueIDItem.steplenght)
}

// optional int32 startcount = 5;
bool UniqueIDItem::has_startcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void UniqueIDItem::set_has_startcount() {
  _has_bits_[0] |= 0x00000010u;
}
void UniqueIDItem::clear_has_startcount() {
  _has_bits_[0] &= ~0x00000010u;
}
void UniqueIDItem::clear_startcount() {
  startcount_ = 0;
  clear_has_startcount();
}
 ::google::protobuf::int32 UniqueIDItem::startcount() const {
  // @@protoc_insertion_point(field_get:protobuf.UniqueIDItem.startcount)
  return startcount_;
}
 void UniqueIDItem::set_startcount(::google::protobuf::int32 value) {
  set_has_startcount();
  startcount_ = value;
  // @@protoc_insertion_point(field_set:protobuf.UniqueIDItem.startcount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyUniqueID::kUuidsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyUniqueID::MyUniqueID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.MyUniqueID)
}

void MyUniqueID::InitAsDefaultInstance() {
}

MyUniqueID::MyUniqueID(const MyUniqueID& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.MyUniqueID)
}

void MyUniqueID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MyUniqueID::~MyUniqueID() {
  // @@protoc_insertion_point(destructor:protobuf.MyUniqueID)
  SharedDtor();
}

void MyUniqueID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MyUniqueID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyUniqueID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyUniqueID_descriptor_;
}

const MyUniqueID& MyUniqueID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

MyUniqueID* MyUniqueID::default_instance_ = NULL;

MyUniqueID* MyUniqueID::New(::google::protobuf::Arena* arena) const {
  MyUniqueID* n = new MyUniqueID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyUniqueID::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.MyUniqueID)
  uuids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MyUniqueID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.MyUniqueID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.UniqueIDItem uuids = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_uuids:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_uuids()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_uuids;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.MyUniqueID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.MyUniqueID)
  return false;
#undef DO_
}

void MyUniqueID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.MyUniqueID)
  // repeated .protobuf.UniqueIDItem uuids = 1;
  for (unsigned int i = 0, n = this->uuids_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->uuids(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.MyUniqueID)
}

::google::protobuf::uint8* MyUniqueID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.MyUniqueID)
  // repeated .protobuf.UniqueIDItem uuids = 1;
  for (unsigned int i = 0, n = this->uuids_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->uuids(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.MyUniqueID)
  return target;
}

int MyUniqueID::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.MyUniqueID)
  int total_size = 0;

  // repeated .protobuf.UniqueIDItem uuids = 1;
  total_size += 1 * this->uuids_size();
  for (int i = 0; i < this->uuids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->uuids(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyUniqueID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.MyUniqueID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const MyUniqueID* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyUniqueID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.MyUniqueID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.MyUniqueID)
    MergeFrom(*source);
  }
}

void MyUniqueID::MergeFrom(const MyUniqueID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.MyUniqueID)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  uuids_.MergeFrom(from.uuids_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MyUniqueID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.MyUniqueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyUniqueID::CopyFrom(const MyUniqueID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.MyUniqueID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyUniqueID::IsInitialized() const {

  return true;
}

void MyUniqueID::Swap(MyUniqueID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyUniqueID::InternalSwap(MyUniqueID* other) {
  uuids_.UnsafeArenaSwap(&other->uuids_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyUniqueID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyUniqueID_descriptor_;
  metadata.reflection = MyUniqueID_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyUniqueID

// repeated .protobuf.UniqueIDItem uuids = 1;
int MyUniqueID::uuids_size() const {
  return uuids_.size();
}
void MyUniqueID::clear_uuids() {
  uuids_.Clear();
}
const ::protobuf::UniqueIDItem& MyUniqueID::uuids(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.MyUniqueID.uuids)
  return uuids_.Get(index);
}
::protobuf::UniqueIDItem* MyUniqueID::mutable_uuids(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.MyUniqueID.uuids)
  return uuids_.Mutable(index);
}
::protobuf::UniqueIDItem* MyUniqueID::add_uuids() {
  // @@protoc_insertion_point(field_add:protobuf.MyUniqueID.uuids)
  return uuids_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::UniqueIDItem >*
MyUniqueID::mutable_uuids() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.MyUniqueID.uuids)
  return &uuids_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::UniqueIDItem >&
MyUniqueID::uuids() const {
  // @@protoc_insertion_point(field_list:protobuf.MyUniqueID.uuids)
  return uuids_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelInfo::kUidFieldNumber;
const int RelInfo::kRelFieldNumber;
const int RelInfo::kCreatetimeFieldNumber;
const int RelInfo::kDealreltimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelInfo::RelInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.RelInfo)
}

void RelInfo::InitAsDefaultInstance() {
}

RelInfo::RelInfo(const RelInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.RelInfo)
}

void RelInfo::SharedCtor() {
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  rel_ = 0;
  createtime_ = 0;
  dealreltime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelInfo::~RelInfo() {
  // @@protoc_insertion_point(destructor:protobuf.RelInfo)
  SharedDtor();
}

void RelInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelInfo_descriptor_;
}

const RelInfo& RelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

RelInfo* RelInfo::default_instance_ = NULL;

RelInfo* RelInfo::New(::google::protobuf::Arena* arena) const {
  RelInfo* n = new RelInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.RelInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RelInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RelInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(uid_, dealreltime_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.RelInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 uid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_rel;
        break;
      }

      // optional int32 rel = 2;
      case 2: {
        if (tag == 16) {
         parse_rel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rel_)));
          set_has_rel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_createtime;
        break;
      }

      // optional int32 createtime = 3;
      case 3: {
        if (tag == 24) {
         parse_createtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_dealreltime;
        break;
      }

      // optional int32 dealreltime = 4;
      case 4: {
        if (tag == 32) {
         parse_dealreltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dealreltime_)));
          set_has_dealreltime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.RelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.RelInfo)
  return false;
#undef DO_
}

void RelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.RelInfo)
  // optional int64 uid = 1;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->uid(), output);
  }

  // optional int32 rel = 2;
  if (has_rel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rel(), output);
  }

  // optional int32 createtime = 3;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->createtime(), output);
  }

  // optional int32 dealreltime = 4;
  if (has_dealreltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dealreltime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.RelInfo)
}

::google::protobuf::uint8* RelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.RelInfo)
  // optional int64 uid = 1;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->uid(), target);
  }

  // optional int32 rel = 2;
  if (has_rel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rel(), target);
  }

  // optional int32 createtime = 3;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->createtime(), target);
  }

  // optional int32 dealreltime = 4;
  if (has_dealreltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dealreltime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.RelInfo)
  return target;
}

int RelInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.RelInfo)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 uid = 1;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional int32 rel = 2;
    if (has_rel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rel());
    }

    // optional int32 createtime = 3;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }

    // optional int32 dealreltime = 4;
    if (has_dealreltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dealreltime());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.RelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RelInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RelInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.RelInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.RelInfo)
    MergeFrom(*source);
  }
}

void RelInfo::MergeFrom(const RelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.RelInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_rel()) {
      set_rel(from.rel());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_dealreltime()) {
      set_dealreltime(from.dealreltime());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RelInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.RelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelInfo::CopyFrom(const RelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.RelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelInfo::IsInitialized() const {

  return true;
}

void RelInfo::Swap(RelInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelInfo::InternalSwap(RelInfo* other) {
  std::swap(uid_, other->uid_);
  std::swap(rel_, other->rel_);
  std::swap(createtime_, other->createtime_);
  std::swap(dealreltime_, other->dealreltime_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelInfo_descriptor_;
  metadata.reflection = RelInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelInfo

// optional int64 uid = 1;
bool RelInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RelInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
void RelInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RelInfo::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
 ::google::protobuf::int64 RelInfo::uid() const {
  // @@protoc_insertion_point(field_get:protobuf.RelInfo.uid)
  return uid_;
}
 void RelInfo::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelInfo.uid)
}

// optional int32 rel = 2;
bool RelInfo::has_rel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RelInfo::set_has_rel() {
  _has_bits_[0] |= 0x00000002u;
}
void RelInfo::clear_has_rel() {
  _has_bits_[0] &= ~0x00000002u;
}
void RelInfo::clear_rel() {
  rel_ = 0;
  clear_has_rel();
}
 ::google::protobuf::int32 RelInfo::rel() const {
  // @@protoc_insertion_point(field_get:protobuf.RelInfo.rel)
  return rel_;
}
 void RelInfo::set_rel(::google::protobuf::int32 value) {
  set_has_rel();
  rel_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelInfo.rel)
}

// optional int32 createtime = 3;
bool RelInfo::has_createtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RelInfo::set_has_createtime() {
  _has_bits_[0] |= 0x00000004u;
}
void RelInfo::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000004u;
}
void RelInfo::clear_createtime() {
  createtime_ = 0;
  clear_has_createtime();
}
 ::google::protobuf::int32 RelInfo::createtime() const {
  // @@protoc_insertion_point(field_get:protobuf.RelInfo.createtime)
  return createtime_;
}
 void RelInfo::set_createtime(::google::protobuf::int32 value) {
  set_has_createtime();
  createtime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelInfo.createtime)
}

// optional int32 dealreltime = 4;
bool RelInfo::has_dealreltime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RelInfo::set_has_dealreltime() {
  _has_bits_[0] |= 0x00000008u;
}
void RelInfo::clear_has_dealreltime() {
  _has_bits_[0] &= ~0x00000008u;
}
void RelInfo::clear_dealreltime() {
  dealreltime_ = 0;
  clear_has_dealreltime();
}
 ::google::protobuf::int32 RelInfo::dealreltime() const {
  // @@protoc_insertion_point(field_get:protobuf.RelInfo.dealreltime)
  return dealreltime_;
}
 void RelInfo::set_dealreltime(::google::protobuf::int32 value) {
  set_has_dealreltime();
  dealreltime_ = value;
  // @@protoc_insertion_point(field_set:protobuf.RelInfo.dealreltime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Relation::kRelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Relation::Relation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.Relation)
}

void Relation::InitAsDefaultInstance() {
}

Relation::Relation(const Relation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.Relation)
}

void Relation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Relation::~Relation() {
  // @@protoc_insertion_point(destructor:protobuf.Relation)
  SharedDtor();
}

void Relation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Relation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Relation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Relation_descriptor_;
}

const Relation& Relation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

Relation* Relation::default_instance_ = NULL;

Relation* Relation::New(::google::protobuf::Arena* arena) const {
  Relation* n = new Relation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Relation::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.Relation)
  rels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Relation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.Relation)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .protobuf.RelInfo rels = 99;
      case 99: {
        if (tag == 794) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_rels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(794)) goto parse_loop_rels;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.Relation)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.Relation)
  return false;
#undef DO_
}

void Relation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.Relation)
  // repeated .protobuf.RelInfo rels = 99;
  for (unsigned int i = 0, n = this->rels_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      99, this->rels(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.Relation)
}

::google::protobuf::uint8* Relation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.Relation)
  // repeated .protobuf.RelInfo rels = 99;
  for (unsigned int i = 0, n = this->rels_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        99, this->rels(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.Relation)
  return target;
}

int Relation::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.Relation)
  int total_size = 0;

  // repeated .protobuf.RelInfo rels = 99;
  total_size += 2 * this->rels_size();
  for (int i = 0; i < this->rels_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rels(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Relation::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Relation* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Relation>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.Relation)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.Relation)
    MergeFrom(*source);
  }
}

void Relation::MergeFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.Relation)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  rels_.MergeFrom(from.rels_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Relation::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Relation::CopyFrom(const Relation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.Relation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Relation::IsInitialized() const {

  return true;
}

void Relation::Swap(Relation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Relation::InternalSwap(Relation* other) {
  rels_.UnsafeArenaSwap(&other->rels_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Relation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Relation_descriptor_;
  metadata.reflection = Relation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Relation

// repeated .protobuf.RelInfo rels = 99;
int Relation::rels_size() const {
  return rels_.size();
}
void Relation::clear_rels() {
  rels_.Clear();
}
const ::protobuf::RelInfo& Relation::rels(int index) const {
  // @@protoc_insertion_point(field_get:protobuf.Relation.rels)
  return rels_.Get(index);
}
::protobuf::RelInfo* Relation::mutable_rels(int index) {
  // @@protoc_insertion_point(field_mutable:protobuf.Relation.rels)
  return rels_.Mutable(index);
}
::protobuf::RelInfo* Relation::add_rels() {
  // @@protoc_insertion_point(field_add:protobuf.Relation.rels)
  return rels_.Add();
}
::google::protobuf::RepeatedPtrField< ::protobuf::RelInfo >*
Relation::mutable_rels() {
  // @@protoc_insertion_point(field_mutable_list:protobuf.Relation.rels)
  return &rels_;
}
const ::google::protobuf::RepeatedPtrField< ::protobuf::RelInfo >&
Relation::rels() const {
  // @@protoc_insertion_point(field_list:protobuf.Relation.rels)
  return rels_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserBinary::kCountersFieldNumber;
const int UserBinary::kUniqueidFieldNumber;
const int UserBinary::kRelationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserBinary::UserBinary()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.UserBinary)
}

void UserBinary::InitAsDefaultInstance() {
  counters_ = const_cast< ::protobuf::MyCounters*>(&::protobuf::MyCounters::default_instance());
  uniqueid_ = const_cast< ::protobuf::MyUniqueID*>(&::protobuf::MyUniqueID::default_instance());
  relation_ = const_cast< ::protobuf::Relation*>(&::protobuf::Relation::default_instance());
}

UserBinary::UserBinary(const UserBinary& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.UserBinary)
}

void UserBinary::SharedCtor() {
  _cached_size_ = 0;
  counters_ = NULL;
  uniqueid_ = NULL;
  relation_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UserBinary::~UserBinary() {
  // @@protoc_insertion_point(destructor:protobuf.UserBinary)
  SharedDtor();
}

void UserBinary::SharedDtor() {
  if (this != default_instance_) {
    delete counters_;
    delete uniqueid_;
    delete relation_;
  }
}

void UserBinary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UserBinary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UserBinary_descriptor_;
}

const UserBinary& UserBinary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

UserBinary* UserBinary::default_instance_ = NULL;

UserBinary* UserBinary::New(::google::protobuf::Arena* arena) const {
  UserBinary* n = new UserBinary;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserBinary::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.UserBinary)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_counters()) {
      if (counters_ != NULL) counters_->::protobuf::MyCounters::Clear();
    }
    if (has_uniqueid()) {
      if (uniqueid_ != NULL) uniqueid_->::protobuf::MyUniqueID::Clear();
    }
    if (has_relation()) {
      if (relation_ != NULL) relation_->::protobuf::Relation::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool UserBinary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.UserBinary)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .protobuf.MyCounters counters = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counters()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_uniqueid;
        break;
      }

      // optional .protobuf.MyUniqueID uniqueid = 2;
      case 2: {
        if (tag == 18) {
         parse_uniqueid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uniqueid()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_relation;
        break;
      }

      // optional .protobuf.Relation relation = 3;
      case 3: {
        if (tag == 26) {
         parse_relation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.UserBinary)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.UserBinary)
  return false;
#undef DO_
}

void UserBinary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.UserBinary)
  // optional .protobuf.MyCounters counters = 1;
  if (has_counters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->counters_, output);
  }

  // optional .protobuf.MyUniqueID uniqueid = 2;
  if (has_uniqueid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->uniqueid_, output);
  }

  // optional .protobuf.Relation relation = 3;
  if (has_relation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->relation_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.UserBinary)
}

::google::protobuf::uint8* UserBinary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.UserBinary)
  // optional .protobuf.MyCounters counters = 1;
  if (has_counters()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, *this->counters_, target);
  }

  // optional .protobuf.MyUniqueID uniqueid = 2;
  if (has_uniqueid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->uniqueid_, target);
  }

  // optional .protobuf.Relation relation = 3;
  if (has_relation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->relation_, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.UserBinary)
  return target;
}

int UserBinary::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.UserBinary)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional .protobuf.MyCounters counters = 1;
    if (has_counters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->counters_);
    }

    // optional .protobuf.MyUniqueID uniqueid = 2;
    if (has_uniqueid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uniqueid_);
    }

    // optional .protobuf.Relation relation = 3;
    if (has_relation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->relation_);
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserBinary::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.UserBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const UserBinary* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const UserBinary>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.UserBinary)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.UserBinary)
    MergeFrom(*source);
  }
}

void UserBinary::MergeFrom(const UserBinary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.UserBinary)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counters()) {
      mutable_counters()->::protobuf::MyCounters::MergeFrom(from.counters());
    }
    if (from.has_uniqueid()) {
      mutable_uniqueid()->::protobuf::MyUniqueID::MergeFrom(from.uniqueid());
    }
    if (from.has_relation()) {
      mutable_relation()->::protobuf::Relation::MergeFrom(from.relation());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void UserBinary::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.UserBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UserBinary::CopyFrom(const UserBinary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.UserBinary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserBinary::IsInitialized() const {

  return true;
}

void UserBinary::Swap(UserBinary* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserBinary::InternalSwap(UserBinary* other) {
  std::swap(counters_, other->counters_);
  std::swap(uniqueid_, other->uniqueid_);
  std::swap(relation_, other->relation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata UserBinary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UserBinary_descriptor_;
  metadata.reflection = UserBinary_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserBinary

// optional .protobuf.MyCounters counters = 1;
bool UserBinary::has_counters() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void UserBinary::set_has_counters() {
  _has_bits_[0] |= 0x00000001u;
}
void UserBinary::clear_has_counters() {
  _has_bits_[0] &= ~0x00000001u;
}
void UserBinary::clear_counters() {
  if (counters_ != NULL) counters_->::protobuf::MyCounters::Clear();
  clear_has_counters();
}
const ::protobuf::MyCounters& UserBinary::counters() const {
  // @@protoc_insertion_point(field_get:protobuf.UserBinary.counters)
  return counters_ != NULL ? *counters_ : *default_instance_->counters_;
}
::protobuf::MyCounters* UserBinary::mutable_counters() {
  set_has_counters();
  if (counters_ == NULL) {
    counters_ = new ::protobuf::MyCounters;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.UserBinary.counters)
  return counters_;
}
::protobuf::MyCounters* UserBinary::release_counters() {
  // @@protoc_insertion_point(field_release:protobuf.UserBinary.counters)
  clear_has_counters();
  ::protobuf::MyCounters* temp = counters_;
  counters_ = NULL;
  return temp;
}
void UserBinary::set_allocated_counters(::protobuf::MyCounters* counters) {
  delete counters_;
  counters_ = counters;
  if (counters) {
    set_has_counters();
  } else {
    clear_has_counters();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.UserBinary.counters)
}

// optional .protobuf.MyUniqueID uniqueid = 2;
bool UserBinary::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void UserBinary::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000002u;
}
void UserBinary::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000002u;
}
void UserBinary::clear_uniqueid() {
  if (uniqueid_ != NULL) uniqueid_->::protobuf::MyUniqueID::Clear();
  clear_has_uniqueid();
}
const ::protobuf::MyUniqueID& UserBinary::uniqueid() const {
  // @@protoc_insertion_point(field_get:protobuf.UserBinary.uniqueid)
  return uniqueid_ != NULL ? *uniqueid_ : *default_instance_->uniqueid_;
}
::protobuf::MyUniqueID* UserBinary::mutable_uniqueid() {
  set_has_uniqueid();
  if (uniqueid_ == NULL) {
    uniqueid_ = new ::protobuf::MyUniqueID;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.UserBinary.uniqueid)
  return uniqueid_;
}
::protobuf::MyUniqueID* UserBinary::release_uniqueid() {
  // @@protoc_insertion_point(field_release:protobuf.UserBinary.uniqueid)
  clear_has_uniqueid();
  ::protobuf::MyUniqueID* temp = uniqueid_;
  uniqueid_ = NULL;
  return temp;
}
void UserBinary::set_allocated_uniqueid(::protobuf::MyUniqueID* uniqueid) {
  delete uniqueid_;
  uniqueid_ = uniqueid;
  if (uniqueid) {
    set_has_uniqueid();
  } else {
    clear_has_uniqueid();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.UserBinary.uniqueid)
}

// optional .protobuf.Relation relation = 3;
bool UserBinary::has_relation() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void UserBinary::set_has_relation() {
  _has_bits_[0] |= 0x00000004u;
}
void UserBinary::clear_has_relation() {
  _has_bits_[0] &= ~0x00000004u;
}
void UserBinary::clear_relation() {
  if (relation_ != NULL) relation_->::protobuf::Relation::Clear();
  clear_has_relation();
}
const ::protobuf::Relation& UserBinary::relation() const {
  // @@protoc_insertion_point(field_get:protobuf.UserBinary.relation)
  return relation_ != NULL ? *relation_ : *default_instance_->relation_;
}
::protobuf::Relation* UserBinary::mutable_relation() {
  set_has_relation();
  if (relation_ == NULL) {
    relation_ = new ::protobuf::Relation;
  }
  // @@protoc_insertion_point(field_mutable:protobuf.UserBinary.relation)
  return relation_;
}
::protobuf::Relation* UserBinary::release_relation() {
  // @@protoc_insertion_point(field_release:protobuf.UserBinary.relation)
  clear_has_relation();
  ::protobuf::Relation* temp = relation_;
  relation_ = NULL;
  return temp;
}
void UserBinary::set_allocated_relation(::protobuf::Relation* relation) {
  delete relation_;
  relation_ = relation;
  if (relation) {
    set_has_relation();
  } else {
    clear_has_relation();
  }
  // @@protoc_insertion_point(field_set_allocated:protobuf.UserBinary.relation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WsUser::kCharIdFieldNumber;
const int WsUser::kAccountIdFieldNumber;
const int WsUser::kNameFieldNumber;
const int WsUser::kTypeFieldNumber;
const int WsUser::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WsUser::WsUser()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:protobuf.WsUser)
}

void WsUser::InitAsDefaultInstance() {
}

WsUser::WsUser(const WsUser& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:protobuf.WsUser)
}

void WsUser::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  char_id_ = GOOGLE_LONGLONG(0);
  account_id_ = GOOGLE_LONGLONG(0);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WsUser::~WsUser() {
  // @@protoc_insertion_point(destructor:protobuf.WsUser)
  SharedDtor();
}

void WsUser::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WsUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WsUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WsUser_descriptor_;
}

const WsUser& WsUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_character_2eproto();
  return *default_instance_;
}

WsUser* WsUser::default_instance_ = NULL;

WsUser* WsUser::New(::google::protobuf::Arena* arena) const {
  WsUser* n = new WsUser;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WsUser::Clear() {
// @@protoc_insertion_point(message_clear_start:protobuf.WsUser)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WsUser, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WsUser*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(char_id_, account_id_);
    ZR_(type_, level_);
    if (has_name()) {
      name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WsUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:protobuf.WsUser)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 char_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &char_id_)));
          set_has_char_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_account_id;
        break;
      }

      // optional int64 account_id = 2;
      case 2: {
        if (tag == 16) {
         parse_account_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &account_id_)));
          set_has_account_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (tag == 26) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "protobuf.WsUser.name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // optional int32 type = 4;
      case 4: {
        if (tag == 32) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (tag == 40) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:protobuf.WsUser)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:protobuf.WsUser)
  return false;
#undef DO_
}

void WsUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:protobuf.WsUser)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->char_id(), output);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->account_id(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.WsUser.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // optional int32 type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->type(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:protobuf.WsUser)
}

::google::protobuf::uint8* WsUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:protobuf.WsUser)
  // optional int64 char_id = 1;
  if (has_char_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->char_id(), target);
  }

  // optional int64 account_id = 2;
  if (has_account_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->account_id(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "protobuf.WsUser.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->type(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protobuf.WsUser)
  return target;
}

int WsUser::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:protobuf.WsUser)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 31u) {
    // optional int64 char_id = 1;
    if (has_char_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->char_id());
    }

    // optional int64 account_id = 2;
    if (has_account_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->account_id());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WsUser::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:protobuf.WsUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const WsUser* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WsUser>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:protobuf.WsUser)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:protobuf.WsUser)
    MergeFrom(*source);
  }
}

void WsUser::MergeFrom(const WsUser& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protobuf.WsUser)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_id()) {
      set_char_id(from.char_id());
    }
    if (from.has_account_id()) {
      set_account_id(from.account_id());
    }
    if (from.has_name()) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WsUser::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:protobuf.WsUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WsUser::CopyFrom(const WsUser& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protobuf.WsUser)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WsUser::IsInitialized() const {

  return true;
}

void WsUser::Swap(WsUser* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WsUser::InternalSwap(WsUser* other) {
  std::swap(char_id_, other->char_id_);
  std::swap(account_id_, other->account_id_);
  name_.Swap(&other->name_);
  std::swap(type_, other->type_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WsUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WsUser_descriptor_;
  metadata.reflection = WsUser_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WsUser

// optional int64 char_id = 1;
bool WsUser::has_char_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WsUser::set_has_char_id() {
  _has_bits_[0] |= 0x00000001u;
}
void WsUser::clear_has_char_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void WsUser::clear_char_id() {
  char_id_ = GOOGLE_LONGLONG(0);
  clear_has_char_id();
}
 ::google::protobuf::int64 WsUser::char_id() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.char_id)
  return char_id_;
}
 void WsUser::set_char_id(::google::protobuf::int64 value) {
  set_has_char_id();
  char_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.char_id)
}

// optional int64 account_id = 2;
bool WsUser::has_account_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WsUser::set_has_account_id() {
  _has_bits_[0] |= 0x00000002u;
}
void WsUser::clear_has_account_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void WsUser::clear_account_id() {
  account_id_ = GOOGLE_LONGLONG(0);
  clear_has_account_id();
}
 ::google::protobuf::int64 WsUser::account_id() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.account_id)
  return account_id_;
}
 void WsUser::set_account_id(::google::protobuf::int64 value) {
  set_has_account_id();
  account_id_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.account_id)
}

// optional string name = 3;
bool WsUser::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WsUser::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
void WsUser::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void WsUser::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
 const ::std::string& WsUser::name() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WsUser::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:protobuf.WsUser.name)
}
 void WsUser::set_name(const char* value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:protobuf.WsUser.name)
}
 void WsUser::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:protobuf.WsUser.name)
}
 ::std::string* WsUser::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:protobuf.WsUser.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WsUser::release_name() {
  // @@protoc_insertion_point(field_release:protobuf.WsUser.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WsUser::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:protobuf.WsUser.name)
}

// optional int32 type = 4;
bool WsUser::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void WsUser::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
void WsUser::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
void WsUser::clear_type() {
  type_ = 0;
  clear_has_type();
}
 ::google::protobuf::int32 WsUser::type() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.type)
  return type_;
}
 void WsUser::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.type)
}

// optional int32 level = 5;
bool WsUser::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void WsUser::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
void WsUser::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
void WsUser::clear_level() {
  level_ = 0;
  clear_has_level();
}
 ::google::protobuf::int32 WsUser::level() const {
  // @@protoc_insertion_point(field_get:protobuf.WsUser.level)
  return level_;
}
 void WsUser::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:protobuf.WsUser.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf

// @@protoc_insertion_point(global_scope)
